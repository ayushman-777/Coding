class SGTree {
private:
	vector<int> seg;
public:
	SGTree(int n) {
		seg.resize(4 * n + 1);
	}
	void build(int ind, int low, int high, int arr[]) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}
		int mid = (low + high) / 2;
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}
	int query(int ind, int low, int high, int l, int r) {
		if (r < low || l > high) {
			return INT_MAX;
		}
		if (l <= low && r >= high) {
			return seg[ind];
		}
		int mid = (low + high) / 2;
		int left = query(2*ind+1, low, mid, l, r);
		int right = query(2*ind+2, mid + 1, high, l, r);
		return min(left, right);
	}
	void update(int ind, int low, int high, int i, int val) {
		if (low == high) {
			seg[ind] = val;
			return;
		}
		int mid = (low + high) / 2;
		if (i <= mid) update(2 * ind + 1, low, mid, i, val);
		else update(2 * ind + 2, mid + 1, high, i, val);
		sed[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}
}

// Lazy Segment Tree

class LSGTree {
	vector<int> lazy, seg;
public:
	LSGTree(int n) {
		lazy.resize(4 * n);
		seg.resize(4 * n);
	}
	void build(int ind, int low, int high, vector<int> arr) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}
		int mid = (low+high)>>1;
		build(2*ind+1, low, mid, arr);
		build(2*ind+2, mid+1, high, arr);
		seg[ind] = seg[2*ind+1] + seg[2*ind+2];
	}
	void update(int ind, int low, int high, int l, int r, int val) {
		if (lazy[ind] != 0) {
			seg[ind] += (high - low + 1) * lazy[ind];
			
			if (low != high) {
				lazy[2*ind+1] += lazy[ind];
				lazy[2*ind+2] += lazy[ind];
			}
			lazy[ind] = 0;
		}
		
		if (l > high || r < low) {
			return;
		}
		
		if (l <= low && r >= high) {
			seg[ind] += (high-low+1)*val;
			if (low != high) {
				lazy[2*ind+1] += val;
				lazy[2*ind+2] += val;
			}
		}
		
		int mid = (low+high) >> 1;
		update(2*ind+1, low, high, l, r, val);
		update(2*ind+2, low, high, l, r, val);
		seg[ind] = seg[2*ind+1] + seg[2*ind+2];
	}
	int query(int ind, int low, int high, int l, int r) {
		if (lazy[ind] != 0) {
			seg[ind] += (high - low + 1) * lazy[ind];
			if (low != high) {
				lazy[2*ind+1] += lazy[ind];
				lazy[2*ind+2] += lazy[ind];
			}
			lazy[ind] = 0;
		}
		if (l > high || r < low) return 0;
		if (l <= low && r >= high) return seg[ind];
		int mid = (low + high) >> 1;
		int left = query(2*ind+1, low, mid, l, r);
		int right = query(2*ind+2, mid+1, high, l, r);
		return left + right;
	}
}

// Fenwick Tree

int fen[n]; // n = 100000
void update(int i, int add) {
	while (i <= n) {
		fen[i] += add;
		i += (i & (-1));
	}
}

int sum(int i) { // prefix sum between 0 and i
	int s = 0;
	while (i > 0) {
		s += fen[i];
		i -= (i&(-i));
	}
	return s;
}

int rangeSum(int l, int r) {
	return sum(r) - sum(l-1);
}

int find(int k) {// binary lifting in fenwick tree
	int curr = 0, ans = 0, prevsum = 0;
	for (int i = log(n); i >= 0; i--) {
		if (fen[curr+(1<<i)] + prevsum < k) {
			curr += (1<<i);
			prevsum += ft[curr];
		}
	}
	return curr + 1;
}